---
title: "Hierarchical Ordination"
subtitle: "An efficient (if not necessarily fast) fitting with INLA"
author: "R.B. O'Hara & B. van der Veen"
format: beamer
---

## What is Model Based Ordination?

## The Data

Communities: $S$ species at $N$ sites

Data $y_{ij}$ ($i=1 \dots n$, $j=1 \dots p$)

$$
\begin{pmatrix}
0 & 5 & 13\\
2 & 7 & 4\\
\end{pmatrix} = 
\begin{pmatrix}
y_{11} & y_{12} & y_{13}\\
y_{21} & y_{22} & y_{23}\\
\end{pmatrix} 
$$

## The Model I: the GLM bit

Assume from the exponential family 

- normal, Poisson, binomial etc.

$g(E(y_{ij})) = \eta_{ij}$ 

- $g()$ is a link function

$\eta_{ij} = \alpha_i + \beta_j + \omicron_{ij}$

We can make $\alpha_i + \beta_j$ more complex, but we put the complexity on $\omicron_{ij}$

## The Model

$$
\begin{aligned}
g(E(Y_{is})) &= \alpha_i + \beta_j + \omicron_{ij} \\
\omicron_{ij} &= \sum_{l=1}^L z_{il} \Sigma_{ll} \gamma_{jl}
\end{aligned}
$$ 


With $\text{Var}(z_{il}) = \text{Var}(\gamma_{jl}) = 1$

So $\text{Var}(\omicron_{ij}) = \sum_{l=1}^L \Sigma_{ll}$

And  $\text{Corr}(\omicron_{is}, \omicron_{it}) = \sum_{l=1}^L \gamma_{sl}\gamma_{tl}$


## Concurrent Ordination

What if we model the site effects, $z_{il}$?

$$
z_{il} = \sum_{k=1}^K X_{ik} \phi_{kl} + \varepsilon_{il}
$$

With $\varepsilon_{il}=0$ this is the same as a constrained ordination.

![](ConCurrentOrd.png)


## Hierarchical Ordination

If we can model $z_{il}$, why not also model $\gamma_{jl}$?

$$
\gamma_{jl} = \sum_{s=1}^S X_{js} \omega_{sl} + \epsilon_{jl}
$$

Trait effects, phylogeny etc etc


## Fitting a Hierarchical Ordination

Difficult!

- MCMC (incl. HMC) seems to do poorly.

So, let's try something different

## Spot the GLM

If we condition on $z_{jl}$, this is a GLM:

$$
\color{red}{g(E(Y_{is})) = \alpha_i + \beta_j +  \sum_{s=1}^S X_{js}\omega_{sl}}z_{i} \color{red}{ +  \epsilon_{jl}}z_{i}
$$ 

If we condition on $\gamma_{il}$, this is a GLM:

$$
g(E(Y_{is})) = \color{red}{\alpha_i + \beta_j + \sum_{k=1}^K X_{ik}} \gamma_{j} \color{red}{\phi_{kl} + }{\gamma_{j}} \color{red}{\varepsilon_{il} }
$$

We use $z_{jl}$ and $\gamma_{j}$ as weights

## In details

We can use this as a multivariate Gibbs sampler

Use INLA, so we have all the flexibility in there

We can marginalise over the posteriors, not just draw from them.

- improve the estimates of $z$ and $\gamma$


## In details

Estimate $z_{jl}$

- Fit $g(E(Y_{is})) = \alpha_i + \beta_j + \sum_{k=1}^K X_{ik} \color{red}{\gamma_{j}}\phi_{kl} + \color{red}{\gamma_{j}}\varepsilon_{il}$
- draw $z^*_{jl} = z_{jl} \sqrt{\Sigma_l} = \sum_{k=1}^K X_{ik} \phi_{kl} + \varepsilon_{il}$ from their posterior
- standardise: $z_{jl} = z^*_{jl}/sd(z^*_{\cdot l})$

Estimate $\gamma_{il}$

- as above

etc.

## Example: Ant traits

From the `gllvm` package


```{r}
#| echo: false
#| warning: false
load("AntsRes.RData")
library(gllvm)
library(INLA)
data("antTraits")

# ColMergeRes1 <- inla.merge(Res$colinla[[1]])
# ColMergeRes2 <- inla.merge(Res$colinla[[2]])
# ColMergeRes3 <- inla.merge(Res$colinla[[3]])
# ColMergeRes4 <- inla.merge(Res$colinla[[4]])
# ColMergeRes <- inla.merge(list(ColMergeRes1, ColMergeRes2, ColMergeRes3, ColMergeRes4))
# rm(ColMergeRes1, ColMergeRes2, ColMergeRes3, ColMergeRes4)
# save(Res, ColMergeRes, file="../inst/AntsRes.RData")

```

- `r ncol(antTraits$abund)` species of ant 
- `r nrow(antTraits$abund)` sites
- `r ncol(antTraits$env)` environmental variables and 
- `r ncol(antTraits$traits)` traits

Use 1 latent variable

## Good Mixing

```{r}

plot(Res$col[,6])

```

100 iterations, `r colnames(antTraits$abund)[6]`

## Good Density

```{r}

par(mfrow=c(1,2))

c6 <- c(unlist(lapply(Res$col, function(l) l[,"Col3lv1"])))
plot(density(c6), main="MCMC draws")
lines(ColMergeRes$marginals.lincomb.derived$lc3.LV1, col=2)

plot(ColMergeRes$marginals.lincomb.derived[["lc3.LV1"]], type="l", main="INLA marginal")

```


## Site & species scores

```{r PlotTrueRow, fig.width=8, fig.height=8}
RowMean <- summary(Res$row)$statistics[,"Mean"]
RowCI <- summary(Res$row)$quantiles

ColMean <- summary(Res$col)$statistics[,"Mean"]
ColCI <- summary(Res$col)$quantiles
SpNames <- gsub("  ", ". ", gsub("\\.", " ", colnames(antTraits$abund)))
par(mfrow=c(1,2), mar=c(2,2,3,1), oma=c(2,8,0,0))
plot(ColMean, 1:length(ColMean), xlim=range(ColCI), main="Column", yaxt="n", ann=FALSE)
axis(2, SpNames, at=1:length(ColMean), las=1)
segments(ColCI[,"2.5%"], 1:length(ColMean), ColCI[,"97.5%"], 1:length(ColMean))
# abline(0,1, col=2); abline(0,-1, col=2)

plot(RowMean, 1:length(RowMean), xlim=range(RowCI), main="Row", yaxt="n", ann=FALSE)
axis(2, rownames(antTraits$abund), las=1)
segments(RowCI[,"2.5%"], 1:length(RowMean), RowCI[,"97.5%"], 1:length(RowMean))
# abline(0,1, col=2); abline(0,-1, col=2)



```

## Covariate Effects

```{r RowCovResults, warning=FALSE}
RowFixedHPD.l <- lapply(RowMergeRes$marginals.fixed, function(marg, p) inla.hpdmarginal(p, marg), p=0.95)

RowHPD <- cbind(
  At = 1:length(RowFixedHPD.l),
  mode = unlist(lapply(RowMergeRes$marginals.fixed, inla.mmarginal)),
  low = unlist(lapply(RowFixedHPD.l, function(x) x[1,"low"])),
  high = unlist(lapply(RowFixedHPD.l, function(x) x[1,"high"]))
)

dimnames(RowHPD)[[1]] <- gsub("\\.", " ", gsub(".LV.*", "", dimnames(RowHPD)[[1]]))

```

```{r ColCovResults, warning=FALSE}
ColFixedHPD.l <- lapply(ColMergeRes$marginals.fixed, function(marg, p) inla.hpdmarginal(p, marg), p=0.95)
ColRandHPD.l <- lapply(ColMergeRes$marginals.random[1:2], function(lst) 
  lapply(lst, function(marg, p) inla.hpdmarginal(p, marg), p=0.95))

ColRandHPD.l2 <- do.call(c, unlist(ColRandHPD.l, recursive=FALSE))

ColRandmode <- unlist(lapply(ColMergeRes$marginals.random[1:2], function(lst) 
  lapply(lst, inla.mmarginal)))

ColHPD <- cbind(
  At = 1:(length(ColMergeRes$marginals.fixed)+length(ColRandmode)),
  mode = c(unlist(lapply(ColMergeRes$marginals.fixed, inla.mmarginal)),
           unlist(ColRandmode)),
  low = unlist(c(lapply(ColFixedHPD.l, function(x) x[1,"low"]),
                 lapply(ColRandHPD.l, lapply, function(x) x[1,"low"]))),
  high = unlist(c(lapply(ColFixedHPD.l, function(x) x[1,"high"]),
                 lapply(ColRandHPD.l, lapply, function(x) x[1,"high"])))
)

dimnames(ColHPD)[[1]] <- gsub("\\.", " ", gsub(".LV.*", "", dimnames(ColHPD)[[1]]))
dimnames(ColHPD)[[1]][grep("Pilos", dimnames(ColHPD)[[1]])] <- paste(dimnames(ColHPD)[[1]][grep("Pilos", dimnames(ColHPD)[[1]])], 1:4, sep=" ")
dimnames(ColHPD)[[1]][grep("Poly", dimnames(ColHPD)[[1]])] <- paste(dimnames(ColHPD)[[1]][grep("Poly", dimnames(ColHPD)[[1]])], 1:3, sep=" ")
```

```{r PlotCovEffs}
par(mar=c(4.1,6,3,1), mfrow=c(1,2), oma=c(0,2,0,0))
plot(ColHPD[-1, "mode"], ColHPD[-1, "At"], xlim=range(ColHPD[-1, c("low", "high")]),
     ann=FALSE, axes=FALSE)
title("Traits")
segments(ColHPD[-1, "low"], ColHPD[-1, "At"], ColHPD[-1, "high"], ColHPD[-1, "At"])
abline(v=0)
axis(1)
axis(2, dimnames(ColHPD)[[1]][-1], at=ColHPD[-1, "At"], las=1)

plot(RowHPD[-1, "mode"], RowHPD[-1, "At"], xlim=range(RowHPD[-1, c("low", "high")]),
     ann=FALSE, axes=FALSE)
title("Environment")
segments(RowHPD[-1, "low"], RowHPD[-1, "At"], RowHPD[-1, "high"], RowHPD[-1, "At"])
abline(v=0)
axis(1)
axis(2, dimnames(RowHPD)[[1]][-1], at=RowHPD[-1, "At"], las=1)

```


## What is Weber's Length?

ML (Mesosomal or Weber's length). The diagonal length of the mesosoma in profile from the point at which the pronotum meets the cervical shield to the posterior basal angle of the metapleuron. 

- Antwiki (https://www.antwiki.org/wiki/Morphological_Measurements)

Abdomen length

## The Current Status

## How Well does it work?

I don't trust these results (yet)

Bugs need to be tracked and caught

\>1 LV will need work to work out how best to rotate the LVs

Then play: Space, time, phylogeny

## If you want to find bugs


(or laugh at my bad coding)

https://github.com/oharar/HierOrd

![](QRcodeHierOrd.png){height=60%}
